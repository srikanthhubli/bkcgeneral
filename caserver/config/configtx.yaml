# configtx
# Used for setting up the Phase-3 of Airline Nw on the cloud

#   CAPABILITIES
Capabilities:
  Application: &ApplicationCapabilities
    V1_3: true
  Orderer: &OrdererCapabilities
    V1_1: true
  Channel: &ChannelCapabilities
    V1_3: true

# ORGANIZATIONS
Organizations:
  - &Orderer
    Name: OrdererMSP
    ID: OrdererMSP
    MSPDir: ../client/orderer/msp
    Policies: &OrdererPolicies
      Readers:
          Type: Signature
          Rule: "OR('OrdererMSP.member')"
      Writers:
          Type: Signature
          Rule: "OR('OrdererMSP.member')"
      Admins:
          Type: Signature
          Rule: "OR('OrdererMSP.admin')"

  - &Org1
    Name: Org1MSP
    ID: Org1MSP
    MSPDir: ../client/org1/msp
    Policies: &Org1Policies
      Readers:
          Type: Signature
        #   Rule: "OR('Org1MSP.admin', 'Org1MSP.peer', 'Org1MSP.client')"
          Rule: "OR('Org1MSP.member')"
      Writers:
          Type: Signature
        #   Rule: "OR('Org1MSP.admin', 'Org1MSP.client')"
          Rule: "OR('Org1MSP.member')"
      Admins:
          Type: Signature
          Rule: "OR('Org1MSP.admin')"
    AnchorPeers:
      - Host: org1-peer1.org1.com
        Port: 7051

  # Added by the Administrator
  - &Org2
    Name: Org2MSP
    ID: Org2MSP
    MSPDir: ../client/org2/msp
    Policies: &Org2Policies
      Readers:
          Type: Signature
        #   Rule: "OR('Org2MSP.admin','Org2MSP.peer','Org2MSP.client')"
          Rule: "OR('Org2MSP.member')"
      Writers:
          Type: Signature
        #   Rule: "OR('Org2MSP.admin','Org2MSP.client')"
          Rule: "OR('Org2MSP.member')"
      Admins:
          Type: Signature
          Rule: "OR('Org2MSP.admin')"
    AnchorPeers:
      - Host: org2-peer1.org2.com
        Port: 8051

  - &Org3
    Name: Org3MSP
    ID: Org3MSP
    MSPDir: ../client/org3/msp
    Policies: &Org3Policies
      Readers:
          Type: Signature
        #   Rule: "OR('Org3MSP.admin','Org3MSP.peer','Org3MSP.client')"
          Rule: "OR('Org3MSP.member')"
      Writers:
          Type: Signature
        #   Rule: "OR('Org3MSP.admin','Org3MSP.client')"
          Rule: "OR('Org3MSP.member')"
      Admins:
          Type: Signature
          Rule: "OR('Org3MSP.admin')"
    AnchorPeers:
      - Host: org3-peer1.org3.com
        Port: 9051
  

#   ORDERER
Orderer: &OrdererDefaults

  OrdererType: solo

  Addresses:
    - orderer.org1.com:7050

    # Policies for Orderer
  Policies:
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta  
        Rule: "MAJORITY Admins"

    # BlockValidation specifies what signatures must be included in the block
    # from the orderer for the peer to validate it.
    BlockValidation:
        Type: ImplicitMeta
        Rule: "ANY Writers"


  # EtcdRaft defines configuration which must be set when the "etcdraft"
  # orderertype is chosen.
  # EtcdRaft:
  #     # The set of Raft replicas for this network. For the etcd/raft-based
  #     # implementation, we expect every replica to also be an OSN. Therefore,
  #     # a subset of the host:port items enumerated in this list should be
  #     # replicated under the Orderer.Addresses key above.
  #     Consenters:
  #         - Host: orderer.org1.com
  #           Port: 7050
  #           # Same cert is being used for client and server - for higher level of security you may use different certs
  #           ClientTLSCert: 
  #           ServerTLSCert: 

  #         - Host: orderer2.org1.com
  #           Port: 7050
  #           ClientTLSCert: 
  #           ServerTLSCert: 

  #         - Host: orderer3.org1.com
  #           Port: 7050
  #           ClientTLSCert: 
  #           ServerTLSCert: 

  #         # Additional Orderers go here
  #         - Host: orderer4.org1.com
  #           Port: 7050
  #           ClientTLSCert: 
  #           ServerTLSCert: 
            
  #         - Host: orderer5.org1.com
  #           Port: 7050
  #           ClientTLSCert: 
  #           ServerTLSCert: 
  #     # Options to be specified for all the etcd/raft nodes. The values here
  #     # are the defaults for all new channels and can be modified on a
  #     # per-channel basis via configuration updates.
  #     Options:
  #         # TickInterval is the time interval between two Node.Tick invocations.
  #         TickInterval: 500ms

  #         # ElectionTick is the number of Node.Tick invocations that must pass
  #         # between elections. That is, if a follower does not receive any
  #         # message from the leader of current term before ElectionTick has
  #         # elapsed, it will become candidate and start an election.
  #         # ElectionTick must be greater than HeartbeatTick.
  #         ElectionTick: 10

  #         # HeartbeatTick is the number of Node.Tick invocations that must
  #         # pass between heartbeats. That is, a leader sends heartbeat
  #         # messages to maintain its leadership every HeartbeatTick ticks.
  #         HeartbeatTick: 1

  #         # MaxInflightBlocks limits the max number of in-flight append messages
  #         # during optimistic replication phase.
  #         MaxInflightBlocks: 5

  #         # SnapshotIntervalSize defines number of bytes per which a snapshot is taken
  #         SnapshotIntervalSize: 20 MB        

  # Batch Timeout: The amount of time to wait before creating a batch
  BatchTimeout: 2s

  # Batch Size: Controls the number of messages batched into a block
  BatchSize:
    MaxMessageCount: 10
    AbsoluteMaxBytes: 98 MB
    PreferredMaxBytes: 512 KB



  Capabilities:
    <<: *OrdererCapabilities

Application: &ApplicationDefaults

  ACLs: &ACLsDefault
    
    # ACL policy for lscc's "getid" function
    lscc/ChaincodeExists: /Channel/Application/Readers

    # ACL policy for lscc's "getdepspec" function
    lscc/GetDeploymentSpec: /Channel/Application/Readers

    # ACL policy for lscc's "getccdata" function
    lscc/GetChaincodeData: /Channel/Application/Readers

    # ACL Policy for lscc's "getchaincodes" function
    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers
    # lscc/GetInstantiatedChaincodes: /Channel/Application/StrictAdminPolicy

    #---Query System Chaincode (qscc) function to policy mapping for access control---#

    # ACL policy for qscc's "GetChainInfo" function
    qscc/GetChainInfo: /Channel/Application/Readers
    # qscc/GetChainInfo: /Channel/Application/StrictAdminPolicy

    # ACL policy for qscc's "GetBlockByNumber" function
    qscc/GetBlockByNumber: /Channel/Application/Readers

    # ACL policy for qscc's  "GetBlockByHash" function
    qscc/GetBlockByHash: /Channel/Application/Readers

    # ACL policy for qscc's "GetTransactionByID" function
    qscc/GetTransactionByID: /Channel/Application/Readers

    # ACL policy for qscc's "GetBlockByTxID" function
    qscc/GetBlockByTxID: /Channel/Application/Readers

    #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

    # ACL policy for cscc's "GetConfigBlock" function
    cscc/GetConfigBlock: /Channel/Application/Readers

    # ACL policy for cscc's "GetConfigTree" function
    cscc/GetConfigTree: /Channel/Application/Readers

    # ACL policy for cscc's "SimulateConfigTreeUpdate" function
    cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

    #---Miscellanesous peer function to policy mapping for access control---#

    # ACL policy for invoking chaincodes on peer
    peer/Propose: /Channel/Application/Writers

    # ACL policy for chaincode to chaincode invocation
    peer/ChaincodeToChaincode: /Channel/Application/Readers

    #---Events resource to policy mapping for access control###---#

    # ACL policy for sending block events
    event/Block: /Channel/Application/Readers

    # ACL policy for sending filtered block events
    event/FilteredBlock: /Channel/Application/Readers

  # Default policies
  Policies: &ApplicationDefaultPolicies
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta
        Rule: "MAJORITY Admins"

    StrictAdminPolicy:
        Type: ImplicitMeta
        Rule: "ANY Admins"
 
  Organizations:

  Capabilities:
    <<: *ApplicationCapabilities
 

#   CHANNEL
Channel: &ChannelDefaults
  Policies:
    Readers:
        Type: ImplicitMeta
        Rule: "ANY Readers"
    Writers:
        Type: ImplicitMeta
        Rule: "ANY Writers"
    Admins:
        Type: ImplicitMeta
        Rule: "MAJORITY Admins"

  Capabilities:

  
#   PROFILES
Profiles:

  TextileOrdererGenesis:
      <<: *ChannelDefaults
      Orderer:
          <<: *OrdererDefaults
          Organizations:
              - <<: *Orderer


      Application:
            <<: *ApplicationDefaults

            Organizations:
                - <<: *Org1               
                - <<: *Org2
                - <<: *Org3


      Consortiums:

        TextileConsortium:
            
            Organizations:
                  - <<: *Org1                               
                  - <<: *Org2
                  - <<: *Org3

                  
  TextileChannel:
    <<: *ChannelDefaults
    Consortium: TextileConsortium
        
    Application:
        <<: *ApplicationDefaults
        
        Organizations:
            - <<: *Org1
            - <<: *Org2
            - <<: *Org3



